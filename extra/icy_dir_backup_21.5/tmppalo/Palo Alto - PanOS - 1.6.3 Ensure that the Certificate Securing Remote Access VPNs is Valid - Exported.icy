L cd %%DBL%% tout60

L curl -k -i -X GET 'https://%%HOST%%/api/?type=keygen&user=%%USER%%&password=%%PASSWORD%%' > tempkey tout60

L sed -n 's/.*<key>\([^<]*\)<\/key>.*/\1/p' tempkey > key tout60

L curl -k "https://%%HOST%%/api/?type=config&action=get&xpath=/config/devices/entry%5B%40name%3D%27localhost.localdomain%27%5D/vsys/entry%5B%40name%3D%27vsys1%27%5D/global-protect&key=`cat key`" | tee global_response tout60

L if (%%DYN_CHOICE%% equal Gateway) xmlstarlet sel -t -v "//global-protect-gateway/entry[@name='%%DYN_PROFILE%%']//ssl-tls-service-profile" -n global_response V> %%SERVICE_PROFILE%% tout60

L if (%%DYN_CHOICE%% equal Portal) xmlstarlet sel -t -v "//global-protect-portal/entry[@name='%%DYN_PROFILE%%']//ssl-tls-service-profile" -n global_response V> %%SERVICE_PROFILE%% tout60

L if (%%SERVICE_PROFILE%% isempty) echo "%%DYN_CHOICE%% %%DYN_PROFILE%% was not found" 
* SUS:%%DYN_CHOICE%% %%DYN_PROFILE%% was not found

L curl -k "https://%%HOST%%/api/?type=config&action=get&xpath=/config/shared/ssl-tls-service-profile&key=`cat key`" | tee ssl_response

L xmlstarlet sel -t -v "//entry[@name='%%SERVICE_PROFILE%%']//min-version" -n ssl_response | sed -E 's/.*(.)/\1/' V> %%TLS_VER%% 
# Saves last char of tls version

L xmlstarlet sel -t -v "//entry[@name='%%SERVICE_PROFILE%%']//certificate" -n ssl_response V> %%CERT_NAME%%

L curl -k "https://%%HOST%%/api/?type=config&action=get&xpath=/config/shared/certificate&key=`cat key`" | tee cert_response

L xmlstarlet sel -t -v "//entry[@name='%%CERT_NAME%%']/not-valid-before" -n cert_response V> %%NOT_VALID_BEFORE%%

L xmlstarlet sel -t -v "//entry[@name='%%CERT_NAME%%']/not-valid-after" -n cert_response V> %%NOT_VALID_AFTER%%

L echo $(($(date '+%s')-$(date -d "%%NOT_VALID_BEFORE%%" '+%s'))) V> %%NOT_VALID_BEFORE%%

L if (%%NOT_VALID_BEFORE%% less 0) echo "Certificate %%DYN_CERT_NAME%% is not valid, start date is in the future" 
* F:Certificate %%DYN_CERT_NAME%% is not valid, start date is in the future

L echo $(($(date -d "%%NOT_VALID_AFTER%%" '+%s')-$(date '+%s'))) V> %%NOT_VALID_AFTER%%

L if (%%NOT_VALID_AFTER%% less 0) echo "Certificate %%DYN_CERT_NAME%% is not valid, certificate expired" 
* F:Certificate %%DYN_CERT_NAME%% is not valid, certificate expired

L xmlstarlet sel -t -v "//entry[@name='%%CERT_NAME%%']/public-key" -n cert_response | sed 's/- /-\n/' | sed 's/ -/\n-/' | openssl x509 -noout -text | tee cert_info

L cat cert_info | grep "Public-Key:" | tr -d -c 0-9 V> %%KEY_LENGTH%% 
# key bit length

L if (%%KEY_LENGTH%% less 2048) echo "Certificate %%DYN_CERT_NAME%% is not valid, key length is less then 2048: %%KEY_LENGTH%%" 
* F:Certificate %%DYN_CERT_NAME%% is not valid, key length is less then 2048: %%KEY_LENGTH%%

L cat cert_info | grep "Signature Algorithm" | head -1 | awk -F': ' '{print $2}' | cut -d'W' -f1 | grep -Eo "[a-zA-Z]*" V> %%ALGO_TYPE%% 
# algorithm type

L cat cert_info | grep "Signature Algorithm" | head -1 | awk -F': ' '{print $2}' | cut -d'W' -f1 | grep -Eo "[0-9]*" V> %%ALGO_COUNT%% 
# algorithm bit count

L rm -rf key tempkey cert_info response ssl_response cert_info

L if (%%TLS_VER%% less 1 OR %%NOT_VALID_BEFORE%% less 0 OR %%NOT_VALID_AFTER%% less 0 OR %%KEY_LENGTH%% less 2048 OR %%ALGO_TYPE%% notequal sha OR %%ALGO_COUNT%% less 2) echo CIS 1.6.3 the Certificate Securing Remote Access VPNs is NOT Valid : FAIL tout60 
* F:CIS 1.6.3 the Certificate Securing Remote Access VPNs is NOT Valid : FAIL

L if (1 equals 1) echo CIS 1.6.3 the Certificate Securing Remote Access VPNs is Valid : PASS tout60 
* S:CIS 1.6.3 the Certificate Securing Remote Access VPNs is Valid : PASS