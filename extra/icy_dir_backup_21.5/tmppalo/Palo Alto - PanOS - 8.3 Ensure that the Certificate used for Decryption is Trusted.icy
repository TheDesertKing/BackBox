L cd %%DBL%%

L curl -k -i -X GET 'https://%%HOST%%/api/?type=keygen&user=%%USER%%&password=%%PASSWORD%%' \> tempkey tout60

L sed -n 's/.*<key>\([^<]*\)<\/key>.*/\1/p' tempkey \> key

L curl -k "https://%%HOST%%/api/?type=config&action=get&xpath=/config/shared/certificate&key=`cat key`" | tee response

L xmlstarlet sel -t -c "//entry[@name='%%DYN_CERT_NAME%%']" -n response V> %%CERT_EXISTS%%

L if (%%CERT_EXISTS%% isempty) echo "Certificate %%DYN_CERT_NAME%% not found" 
* F:Certificate %%DYN_CERT_NAME%% not found

L xmlstarlet sel -t -v "//entry[@name='%%DYN_CERT_NAME%%']/ca" -n response V> %%IS_CA%%

L if (%%IS_CA%% notcontains yes) echo "Certificate %%DYN_CERT_NAME%% is not Trusted CA" 
* F:Certificate %%DYN_CERT_NAME%% is not Trusted CA

L xmlstarlet sel -t -v "//entry[@name='%%DYN_CERT_NAME%%']/not-valid-before" -n response V> %%NOT_VALID_BEFORE%%

L xmlstarlet sel -t -v "//entry[@name='%%DYN_CERT_NAME%%']/not-valid-after" -n response V> %%NOT_VALID_AFTER%%

L echo $(($(date '+%s')-$(date -d "%%NOT_VALID_BEFORE%%" '+%s'))) V> %%NOT_VALID_BEFORE%%

L if (%%NOT_VALID_BEFORE%% less 0) echo "Certificate %%DYN_CERT_NAME%% is not valid, start date is in the future" 
* F:Certificate %%DYN_CERT_NAME%% is not valid, start date is in the future

L echo $(($(date -d "%%NOT_VALID_AFTER%%" '+%s')-$(date '+%s'))) V> %%NOT_VALID_AFTER%%

L if (%%NOT_VALID_AFTER%% less 0) echo "Certificate %%DYN_CERT_NAME%% is not valid, certificate expired" 
* F:Certificate %%DYN_CERT_NAME%% is not valid, certificate expired

L xmlstarlet sel -t -v "//entry[@name='%%DYN_CERT_NAME%%']/public-key" -n response | sed 's/- /-\n/' | sed 's/ -/\n-/' | openssl x509 -noout -text | tee cert_info

L cat cert_info | grep "Signature Algorithm" | head -1 | awk -F': ' '{print $2}' V> %%ALGORITHM%%

L if (%%ALGORITHM%% notcontains %%DYN_ALGO%% AND %%DYN_ALGO%% isnotempty) echo "Certificate %%DYN_CERT_NAME%% has algorithm %%ALGORITHM%% set, not %%DYN_ALGO%%, as specified by dynamic field" 
* F:Certificate %%DYN_CERT_NAME%% has algorithm %%ALGORITHM%% set, not %%DYN_ALGO%%, as specified by dynamic field

L cat cert_info | grep "Subject:" V> %%SUBJECT%%

L if (%%SUBJECT%% notcontains %%DYN_SUBJECT%% AND %%DYN_SUBJECT%% isnotempty) echo "Certificate %%DYN_CERT_NAME%%'s Subject does not contain %%DYN_SUBJECT%%, as specified by dynamic field. %%SUBJECT%%" 
* F:Certificate %%DYN_CERT_NAME%%'s Subject does not contain %%DYN_SUBJECT%%, as specified by dynamic field. Subject: %%SUBJECT%%

L cat cert_info | grep "Issuer:" V> %%ISSUER%%

L if (%%ISSUER%% notcontains %%DYN_ISSUER%% AND %%DYN_ISSUER%% isnotempty) echo "Certificate %%DYN_CERT_NAME%%'s Issuer does not contain %%DYN_ISSUER%%, as specified by dynamic field. %%ISSUER%%" 
* F:Certificate %%DYN_CERT_NAME%%'s Issuer does not contain %%DYN_ISSUER%%, as specified by dynamic field. %%ISSUER%%

L cat cert_info | grep "Issuer:" V> %%CA_INFO%%

L if (%%CA_INFO%% notcontains %%DYN_CA%% AND %%DYN_CA%% isnotempty) echo "Certificate %%DYN_CERT_NAME%%'s CA information does not contain %%DYN_CA%%, as specified by dynamic field. %%CA_INFO%%" 
* F:Certificate %%DYN_CERT_NAME%%'s CA information does not contain %%DYN_CA%%, as specified by dynamic field. %%CA_INFO%%

L curl -k "https://%%HOST%%/api/?type=config&action=get&xpath=/config/shared/certificate-profile&key=`cat key`" | tee prof_response

L xmlstarlet sel -t -m "//certificate-profile/entry[CA/entry[@name='%%DYN_CERT_NAME%%']]" -v "@name" -n prof_response V> %%PROFILES%%

L if (%%PROFILES%% isempty) echo "No Certificate Profiles use certificate %%DYN_CERT_NAME%%" 
* F:No Certificate Profiles use certificate %%DYN_CERT_NAME%%

L rm -rf key tempkey response cert_info prof_response

L if (%%NOT_VALID_AFTER%% greater 0 AND %%NOT_VALID_BEFORE%% greater 0) echo CIS 8.2 'SSL Inbound Inspection' is required for all untrusted traffic destined for servers using SSL or TLS is configured : PASS 
* S:CIS 8.2 'SSL Inbound Inspection' is required for all untrusted traffic destined for servers using SSL or TLS is configured : PASS
