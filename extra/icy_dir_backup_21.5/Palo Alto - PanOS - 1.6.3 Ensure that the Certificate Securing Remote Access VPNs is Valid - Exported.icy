L cd %%DBL%%

L curl -k -i -X GET 'https://%%HOST%%/api/?type=keygen&user=%%USER%%&password=%%PASSWORD%%' > tempkey tout60

L sed -n 's/.*<key>\([^<]*\)<\/key>.*/\1/p' tempkey > key

L curl -k "https://%%HOST%%/api/?type=config&action=get&xpath=/config/devices/entry%5B%40name%3D%27localhost.localdomain%27%5D/vsys&key=`cat key`" | tee response tout60

L curl -k "https://%%HOST%%/api/?type=config&action=get&xpath=/config/shared/ssl-tls-service-profile&key=`cat key`" | tee ssl_response

L curl -k "https://%%HOST%%/api/?type=config&action=get&xpath=/config/shared/certificate&key=`cat key`" | tee cert_response

L xmlstarlet sel -t -v "//result/vsys/entry/@name" -n response > vsys_list

L cat vsys_list | wc -l V> %%VSYS_COUNTER%%

L head -1 vsys_list; sed -i '1d' vsys_list V> %%VSYS_NAME%%

L xmlstarlet sel -t -c "//result/vsys/entry[@name='%%VSYS_NAME%%']/global-protect" -n response > vsys_conf

L xmlstarlet sel -t -v "//global-protect-%%DYN_CHOICE%%/entry/@name" -n vsys_conf > entries

L cat entries | sed '/^$/d' | wc -l V> %%COUNTER%%

I if (%%COUNTER%% equal 0) gotoline 37 100
# VSYS has no gateway/portal configured

L head -1 entries; sed -i '1d' entries V> %%ENTRY_NAME%%

L xmlstarlet sel -t -v "//entry[@name='%%ENTRY_NAME%%']//ssl-tls-service-profile" -n vsys_conf V> %%SERVICE_PROFILE%%

L if (%%SERVICE_PROFILE%% isempty) echo 'VSYS %%VSYS_NAME%%: %%DYN_CHOICE%% %%ENTRY_NAME%% - SSL TLS Service Profile is not set' >> issues

L xmlstarlet sel -t -v "//entry[@name='%%SERVICE_PROFILE%%']//min-version" -n ssl_response | sed -E 's/.*(.)/\1/' V> %%TLS_VER%% 
# Saves last char of tls version

L if (%%TLS_VER%% < 1) echo "VSYS %%VSYS_NAME%%: %%DYN_CHOICE%% %%ENTRY_NAME%% - TLS version should be 1.1 or higher, current is: 1.%%TLS_VER%%" >> issues

L xmlstarlet sel -t -v "//entry[@name='%%SERVICE_PROFILE%%']//certificate" -n ssl_response V> %%CERT_NAME%%

L xmlstarlet sel -t -v "//entry[@name='%%CERT_NAME%%']/not-valid-before" -n cert_response V> %%NOT_VALID_BEFORE%%

L xmlstarlet sel -t -v "//entry[@name='%%CERT_NAME%%']/not-valid-after" -n cert_response V> %%NOT_VALID_AFTER%%

L echo $(($(date '+%s')-$(date -d "%%NOT_VALID_BEFORE%%" '+%s'))) V> %%NOT_VALID_BEFORE%%

L if (%%NOT_VALID_BEFORE%% less 0) echo "VSYS %%VSYS_NAME%%: %%DYN_CHOICE%% %%ENTRY_NAME%% - Certificate %%CERT_NAME%% is not valid, start date is in the future" >> issues

L echo $(($(date -d "%%NOT_VALID_AFTER%%" '+%s')-$(date '+%s'))) V> %%NOT_VALID_AFTER%%

L if (%%NOT_VALID_AFTER%% less 0) echo "VSYS %%VSYS_NAME%%: %%DYN_CHOICE%% %%ENTRY_NAME%% - Certificate %%CERT_NAME%% is not valid, certificate expired" >> issues

L xmlstarlet sel -t -v "//entry[@name='%%CERT_NAME%%']/public-key" -n cert_response | openssl x509 -noout -text 2>/dev/null | tee cert_info

L cat cert_info | grep "Public-Key:" | tr -d -c 0-9 V> %%KEY_LENGTH%% 
# key bit length

L if (%%KEY_LENGTH%% less 2048) echo "VSYS %%VSYS_NAME%%: %%DYN_CHOICE%% %%ENTRY_NAME%% Certificate %%CERT_NAME%% is not valid, key length is less then 2048: %%KEY_LENGTH%%" >> issues

L cat cert_info | grep "Signature Algorithm" | head -1 | awk -F': ' '{print $2}' V> %%ALGORITHM%% 
# algorithm type

L echo '%%ALGORITHM%%' | tr '[:upper:]' '[:lower:]' V> %%LOWER_CASE_ALGO%%

L if (%%LOWER_CASE_ALGO%% notcontains sha) echo "VSYS %%VSYS_NAME%%: %%DYN_CHOICE%% %%ENTRY_NAME%% - Certificate %%CERT_NAME%% Algorithm type should be SHA, current algorithm type: %%ALGORITHM%%" >> issues

L cat cert_info | grep "Signature Algorithm" | head -1 | awk -F': ' '{print $2}' | cut -d'W' -f1 | grep -Eo "[0-9]*" V> %%ALGO_COUNT%% 
# algorithm bit count

L if (%%LOWER_CASE_ALGO%% contains sha AND %%ALGO_COUNT%% < 2) echo "VSYS %%VSYS_NAME%%: %%DYN_CHOICE%% %%ENTRY_NAME%% - Certificate %%CERT_NAME%% Algorithm bit count should be 2 or more, current algorithm bit count: %%ALGO_COUNT%%" >> issues

L echo "$((%%COUNTER%% - 1))" V> %%COUNTER%%

I if (%%COUNTER%% > 0) gotoline 14 100

L echo "$((%%VSYS_COUNTER%% - 1))" V> %%VSYS_COUNTER%%

I if (%%VSYS_COUNTER%% > 0) gotoline 9 100

L cat issues V> %%ISSUES%%

L cd %%DBL%%; ls | grep -v logs | tee /dev/tty | xargs rm -rf
#Cleanup

L if (%%ISSUES%% notcontains such file) echo '%%ISSUES%%'
* F:%%ISSUES%%

L if (%%ISSUES%% contains such file) echo 'All VSYS GlobalProtect %%DYN_CHOICE%%s are set with a valid certificate'
* S:All VSYS GlobalProtect %%DYN_CHOICE%%s are set with a valid certificate
